pipeline {
    agent any

    environment {
        DEPLOY_DIR = 'deployment'
        PYTHON_PATH = 'C:\\Users\\Admin\\AppData\\Local\\Microsoft\\WindowsApps\\python.exe'
    }

    stages {
        stage('Setup') {
            steps {
                script {
                    // Check if Python is available
                    def pythonAvailable = bat(script: "${PYTHON_PATH} --version", returnStatus: true) == 0
                    if (!pythonAvailable) {
                        error "Python is not available at the specified path: ${PYTHON_PATH}. Ensure Python is installed."
                    }
                    
                    // Install required packages if not already available
                    if (fileExists('requirements.txt')) {
                        bat "${PYTHON_PATH} -m pip install --upgrade pip && ${PYTHON_PATH} -m pip install -r requirements.txt"
                    }
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                script {
                    bat "bandit -r app.py -f html -o security-report.html && bandit -r app.py -f json -o security-report.json"
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'security-report.*', fingerprint: true
                    publishHTML([ 
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: '.',
                        reportFiles: 'security-report.html',
                        reportName: 'Security Scan Report',
                        reportTitles: ''
                    ])
                }
            }
        }
        
        stage('Coverage Analysis') {
            steps {
                script {
                    bat """
                        ${PYTHON_PATH} -m coverage run -m pytest
                        ${PYTHON_PATH} -m coverage report
                        ${PYTHON_PATH} -m coverage html
                        ${PYTHON_PATH} -m coverage xml
                        ${PYTHON_PATH} -m coverage-badge -o coverage-badge.svg
                    """
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'htmlcov/**, coverage.xml, coverage-badge.svg', fingerprint: true
                    publishHTML([ 
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'htmlcov',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report',
                        reportTitles: ''
                    ])
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    bat """
                        mkdir ${DEPLOY_DIR}
                        copy app.py ${DEPLOY_DIR}\\
                        copy requirements.txt ${DEPLOY_DIR}\\
                        echo Deployment timestamp: %DATE% %TIME% > ${DEPLOY_DIR}\\version.txt
                        echo Build number: ${BUILD_NUMBER} >> ${DEPLOY_DIR}\\version.txt
                        cd ${DEPLOY_DIR}
                        ${PYTHON_PATH} -c "import app; print(app.greet('Deployment Test'))"
                    """
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: "${DEPLOY_DIR}/**", fingerprint: true
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
