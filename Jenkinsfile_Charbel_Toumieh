pipeline {
    agent any

    environment {
        DEPLOY_DIR = 'deployment'
        // Add Python to the PATH
        PATH = "${env.PATH};C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311"
    }

    stages {
        stage('Setup') {
            steps {
                script {
                    // Check if Python is available
                    def pythonAvailable = bat(script: "C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\python.exe --version", returnStatus: true) == 0
                    if (!pythonAvailable) {
                        error "Python is not available in the PATH. Ensure Python is installed and added to PATH."
                    }
                    
                    // Install required packages if not already available
                    if (fileExists('requirements.txt')) {
                        bat """
                            C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\python.exe -m pip install --upgrade pip
                            C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\python.exe -m pip install -r requirements.txt
                            C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\python.exe -m pip install --no-warn-script-location coverage
                        """
                    }
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                script {
                    bat "C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\python.exe -m bandit -r app.py -f html -o security-report.html && C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\python.exe -m bandit -r app.py -f json -o security-report.json"
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'security-report.*', fingerprint: true
                    publishHTML([ 
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: '.',
                        reportFiles: 'security-report.html',
                        reportName: 'Security Scan Report',
                        reportTitles: ''
                    ])
                }
            }
        }
        
        stage('Coverage Analysis') {
            steps {
                script {
                    // Run tests and generate coverage report
                    bat '''
                        C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\python.exe -m coverage run -m pytest
                        C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\python.exe -m coverage report > coverage.txt
                        C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\python.exe -m coverage html
                        C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\python.exe -m coverage xml
                    '''
                    
                    // Read the coverage percentage from the report
                    def coverageOutput = bat(script: "findstr /C:\"TOTAL\" coverage.txt", returnStdout: true).trim()
                    def coverageValue = coverageOutput.split().last()

                    // Log coverage percentage
                    echo "Coverage Percentage: ${coverageValue}%"
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'htmlcov/**, coverage.xml', fingerprint: true
                    publishHTML([ 
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'htmlcov',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report',
                        reportTitles: ''
                    ])
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    bat """
                        mkdir ${DEPLOY_DIR}
                        copy app.py ${DEPLOY_DIR}\\
                        copy requirements.txt ${DEPLOY_DIR}\\
                        echo Deployment timestamp: %DATE% %TIME% > ${DEPLOY_DIR}\\version.txt
                        echo Build number: ${BUILD_NUMBER} >> ${DEPLOY_DIR}\\version.txt
                        cd ${DEPLOY_DIR}
                        C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\python.exe -c "import app; print(app.greet('Deployment Test'))"
                    """
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: "${DEPLOY_DIR}/**", fingerprint: true
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
